{"ast":null,"code":"import axios from'axios';const API_BASE_URL=process.env.REACT_APP_API_URL||'http://localhost:5000/api';console.log('API Base URL:',API_BASE_URL);// Debug log\n// Create axios instance\nconst api=axios.create({baseURL:API_BASE_URL,timeout:10000,headers:{'Content-Type':'application/json'}});// Request interceptor to add auth token\napi.interceptors.request.use(config=>{const token=localStorage.getItem('token');if(token){config.headers.Authorization=`Bearer ${token}`;}console.log('Making request to:',config.url,'with base URL:',config.baseURL);// Debug log\nreturn config;},error=>{console.error('Request error:',error);return Promise.reject(error);});// Response interceptor to handle errors\napi.interceptors.response.use(response=>{console.log('Response received:',response.config.url,response.status);// Debug log\nreturn response;},error=>{var _error$response;console.error('Response error:',error);if(((_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status)===401){// Token expired or invalid\nlocalStorage.removeItem('token');localStorage.removeItem('user');window.location.href='/login';}return Promise.reject(error);});// Auth API\nexport const authAPI={// Send OTP to phone number\nsendOTP:async phoneNumber=>{try{console.log('Sending OTP to:',phoneNumber);// Debug log\nconst response=await api.post('/auth/send-otp',{phoneNumber});return response.data;}catch(error){console.error('Send OTP error:',error);throw error;}},// Verify OTP and login\nverifyOTP:async(phoneNumber,otp)=>{try{console.log('Verifying OTP for:',phoneNumber);// Debug log\nconst response=await api.post('/auth/login',{phoneNumber,otp});return response.data;}catch(error){console.error('Verify OTP error:',error);throw error;}},// Get test users\ngetTestUsers:async()=>{try{console.log('Fetching test users');// Debug log\nconst response=await api.get('/auth/test-users');return response.data;}catch(error){console.error('Get test users error:',error);throw error;}}};// User API\nexport const userAPI={// Get user profile\ngetProfile:async()=>{try{console.log('Fetching user profile');// Debug log\nconst response=await api.get('/user/profile');return response.data;}catch(error){console.error('Get profile error:',error);throw error;}},// Update user profile\nupdateProfile:async userData=>{try{console.log('Updating user profile');// Debug log\nconst response=await api.put('/user/profile',userData);return response.data;}catch(error){console.error('Update profile error:',error);throw error;}},// Get user verification status\ngetVerificationStatus:async()=>{try{console.log('Fetching verification status');// Debug log\nconst response=await api.get('/user/verification');return response.data;}catch(error){console.error('Get verification status error:',error);throw error;}},// Get dashboard data\ngetDashboardData:async()=>{try{console.log('Fetching dashboard data');// Debug log\nconst response=await api.get('/user/dashboard');return response.data;}catch(error){console.error('Get dashboard data error:',error);throw error;}},// Get all user documents\ngetUserDocuments:async()=>{try{console.log('Fetching user documents');// Debug log\nconst response=await api.get('/user/documents');return response.data;}catch(error){console.error('Get user documents error:',error);throw error;}},// Get specific document\ngetDocument:async documentType=>{try{console.log('Fetching document:',documentType);// Debug log\nconst response=await api.get(`/user/documents/${documentType}`);return response.data;}catch(error){console.error('Get document error:',error);throw error;}}};// Schemes API\nexport const schemesAPI={// Get all schemes\ngetAllSchemes:async()=>{const response=await api.get('/schemes');return response.data;},// Get scheme by ID\ngetSchemeById:async id=>{const response=await api.get(`/schemes/${id}`);return response.data;},// Get schemes by category\ngetSchemesByCategory:async category=>{const response=await api.get(`/schemes/category/${category}`);return response.data;},// Get user's eligible schemes\ngetEligibleSchemes:async()=>{const response=await api.get('/schemes/eligible/me');return response.data;},// Get user's eligibility for all schemes\ngetEligibilityResults:async()=>{const response=await api.get('/schemes/eligibility/me');return response.data;},// Get eligibility stats\ngetEligibilityStats:async()=>{const response=await api.get('/schemes/stats/me');return response.data;},// Get schemes by category with eligibility\ngetSchemesByCategoryWithEligibility:async category=>{const response=await api.get(`/schemes/category/${category}/me`);return response.data;}};// Health check\nexport const healthCheck=async()=>{const response=await api.get('/health');return response.data;};export default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","console","log","api","create","baseURL","timeout","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","url","error","Promise","reject","response","status","_error$response","removeItem","window","location","href","authAPI","sendOTP","phoneNumber","post","data","verifyOTP","otp","getTestUsers","get","userAPI","getProfile","updateProfile","userData","put","getVerificationStatus","getDashboardData","getUserDocuments","getDocument","documentType","schemesAPI","getAllSchemes","getSchemeById","id","getSchemesByCategory","category","getEligibleSchemes","getEligibilityResults","getEligibilityStats","getSchemesByCategoryWithEligibility","healthCheck"],"sources":["C:/Users/KulkarniSr/OneDrive - Version 1/Downloads_Backup/CURSOR-PROJECT/frontend/src/services/api.ts"],"sourcesContent":["import axios, { AxiosResponse } from 'axios';\r\nimport { \r\n  ApiResponse, \r\n  LoginResponse, \r\n  User, \r\n  Scheme, \r\n  EligibilityResult, \r\n  EligibilityStats, \r\n  TestUser,\r\n  UserDocuments\r\n} from '../types';\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\nconsole.log('API Base URL:', API_BASE_URL); // Debug log\r\n\r\n// Create axios instance\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  timeout: 10000,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Request interceptor to add auth token\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    console.log('Making request to:', config.url, 'with base URL:', config.baseURL); // Debug log\r\n    return config;\r\n  },\r\n  (error) => {\r\n    console.error('Request error:', error);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Response interceptor to handle errors\r\napi.interceptors.response.use(\r\n  (response: AxiosResponse) => {\r\n    console.log('Response received:', response.config.url, response.status); // Debug log\r\n    return response;\r\n  },\r\n  (error) => {\r\n    console.error('Response error:', error);\r\n    if (error.response?.status === 401) {\r\n      // Token expired or invalid\r\n      localStorage.removeItem('token');\r\n      localStorage.removeItem('user');\r\n      window.location.href = '/login';\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Auth API\r\nexport const authAPI = {\r\n  // Send OTP to phone number\r\n  sendOTP: async (phoneNumber: string): Promise<ApiResponse<{ phoneNumber: string; otp: string }>> => {\r\n    try {\r\n      console.log('Sending OTP to:', phoneNumber); // Debug log\r\n      const response = await api.post<ApiResponse<{ phoneNumber: string; otp: string }>>(\r\n        '/auth/send-otp',\r\n        { phoneNumber }\r\n      );\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Send OTP error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Verify OTP and login\r\n  verifyOTP: async (phoneNumber: string, otp: string): Promise<ApiResponse<LoginResponse>> => {\r\n    try {\r\n      console.log('Verifying OTP for:', phoneNumber); // Debug log\r\n      const response = await api.post<ApiResponse<LoginResponse>>(\r\n        '/auth/login',\r\n        { phoneNumber, otp }\r\n      );\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Verify OTP error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get test users\r\n  getTestUsers: async (): Promise<ApiResponse<TestUser[]>> => {\r\n    try {\r\n      console.log('Fetching test users'); // Debug log\r\n      const response = await api.get<ApiResponse<TestUser[]>>('/auth/test-users');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Get test users error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n};\r\n\r\n// User API\r\nexport const userAPI = {\r\n  // Get user profile\r\n  getProfile: async (): Promise<ApiResponse<User>> => {\r\n    try {\r\n      console.log('Fetching user profile'); // Debug log\r\n      const response = await api.get<ApiResponse<User>>('/user/profile');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Get profile error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Update user profile\r\n  updateProfile: async (userData: Partial<User>): Promise<ApiResponse<User>> => {\r\n    try {\r\n      console.log('Updating user profile'); // Debug log\r\n      const response = await api.put<ApiResponse<User>>('/user/profile', userData);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Update profile error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get user verification status\r\n  getVerificationStatus: async (): Promise<ApiResponse<any>> => {\r\n    try {\r\n      console.log('Fetching verification status'); // Debug log\r\n      const response = await api.get<ApiResponse<any>>('/user/verification');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Get verification status error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get dashboard data\r\n  getDashboardData: async (): Promise<ApiResponse<any>> => {\r\n    try {\r\n      console.log('Fetching dashboard data'); // Debug log\r\n      const response = await api.get<ApiResponse<any>>('/user/dashboard');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Get dashboard data error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get all user documents\r\n  getUserDocuments: async (): Promise<ApiResponse<UserDocuments>> => {\r\n    try {\r\n      console.log('Fetching user documents'); // Debug log\r\n      const response = await api.get<ApiResponse<UserDocuments>>('/user/documents');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Get user documents error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get specific document\r\n  getDocument: async (documentType: string): Promise<ApiResponse<any>> => {\r\n    try {\r\n      console.log('Fetching document:', documentType); // Debug log\r\n      const response = await api.get<ApiResponse<any>>(`/user/documents/${documentType}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Get document error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n};\r\n\r\n// Schemes API\r\nexport const schemesAPI = {\r\n  // Get all schemes\r\n  getAllSchemes: async (): Promise<ApiResponse<Scheme[]>> => {\r\n    const response = await api.get<ApiResponse<Scheme[]>>('/schemes');\r\n    return response.data;\r\n  },\r\n\r\n  // Get scheme by ID\r\n  getSchemeById: async (id: string): Promise<ApiResponse<Scheme>> => {\r\n    const response = await api.get<ApiResponse<Scheme>>(`/schemes/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Get schemes by category\r\n  getSchemesByCategory: async (category: string): Promise<ApiResponse<Scheme[]>> => {\r\n    const response = await api.get<ApiResponse<Scheme[]>>(`/schemes/category/${category}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Get user's eligible schemes\r\n  getEligibleSchemes: async (): Promise<ApiResponse<Scheme[]>> => {\r\n    const response = await api.get<ApiResponse<Scheme[]>>('/schemes/eligible/me');\r\n    return response.data;\r\n  },\r\n\r\n  // Get user's eligibility for all schemes\r\n  getEligibilityResults: async (): Promise<ApiResponse<EligibilityResult[]>> => {\r\n    const response = await api.get<ApiResponse<EligibilityResult[]>>('/schemes/eligibility/me');\r\n    return response.data;\r\n  },\r\n\r\n  // Get eligibility stats\r\n  getEligibilityStats: async (): Promise<ApiResponse<EligibilityStats>> => {\r\n    const response = await api.get<ApiResponse<EligibilityStats>>('/schemes/stats/me');\r\n    return response.data;\r\n  },\r\n\r\n  // Get schemes by category with eligibility\r\n  getSchemesByCategoryWithEligibility: async (category: string): Promise<ApiResponse<EligibilityResult[]>> => {\r\n    const response = await api.get<ApiResponse<EligibilityResult[]>>(`/schemes/category/${category}/me`);\r\n    return response.data;\r\n  },\r\n};\r\n\r\n// Health check\r\nexport const healthCheck = async (): Promise<ApiResponse<{ status: string; message: string }>> => {\r\n  const response = await api.get<ApiResponse<{ status: string; message: string }>>('/health');\r\n  return response.data;\r\n};\r\n\r\nexport default api; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}