{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor to add auth token\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor to handle errors\napi.interceptors.response.use(response => {\n  return response;\n}, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    // Token expired or invalid\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\n\n// Auth API\nexport const authAPI = {\n  // Send OTP to phone number\n  sendOTP: async phoneNumber => {\n    const response = await api.post('/auth/send-otp', {\n      phoneNumber\n    });\n    return response.data;\n  },\n  // Verify OTP and login\n  verifyOTP: async (phoneNumber, otp) => {\n    const response = await api.post('/auth/verify-otp', {\n      phoneNumber,\n      otp\n    });\n    return response.data;\n  },\n  // Get test users\n  getTestUsers: async () => {\n    const response = await api.get('/auth/test-users');\n    return response.data;\n  }\n};\n\n// User API\nexport const userAPI = {\n  // Get user profile\n  getProfile: async () => {\n    const response = await api.get('/user/profile');\n    return response.data;\n  },\n  // Update user profile\n  updateProfile: async userData => {\n    const response = await api.put('/user/profile', userData);\n    return response.data;\n  },\n  // Get user verification status\n  getVerificationStatus: async () => {\n    const response = await api.get('/user/verification');\n    return response.data;\n  },\n  // Get dashboard data\n  getDashboardData: async () => {\n    const response = await api.get('/user/dashboard');\n    return response.data;\n  }\n};\n\n// Schemes API\nexport const schemesAPI = {\n  // Get all schemes\n  getAllSchemes: async () => {\n    const response = await api.get('/schemes');\n    return response.data;\n  },\n  // Get scheme by ID\n  getSchemeById: async id => {\n    const response = await api.get(`/schemes/${id}`);\n    return response.data;\n  },\n  // Get schemes by category\n  getSchemesByCategory: async category => {\n    const response = await api.get(`/schemes/category/${category}`);\n    return response.data;\n  },\n  // Get user's eligible schemes\n  getEligibleSchemes: async () => {\n    const response = await api.get('/schemes/eligible/me');\n    return response.data;\n  },\n  // Get user's eligibility for all schemes\n  getEligibilityResults: async () => {\n    const response = await api.get('/schemes/eligibility/me');\n    return response.data;\n  },\n  // Get eligibility stats\n  getEligibilityStats: async () => {\n    const response = await api.get('/schemes/stats/me');\n    return response.data;\n  },\n  // Get schemes by category with eligibility\n  getSchemesByCategoryWithEligibility: async category => {\n    const response = await api.get(`/schemes/category/${category}/me`);\n    return response.data;\n  }\n};\n\n// Health check\nexport const healthCheck = async () => {\n  const response = await api.get('/health');\n  return response.data;\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","timeout","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","authAPI","sendOTP","phoneNumber","post","data","verifyOTP","otp","getTestUsers","get","userAPI","getProfile","updateProfile","userData","put","getVerificationStatus","getDashboardData","schemesAPI","getAllSchemes","getSchemeById","id","getSchemesByCategory","category","getEligibleSchemes","getEligibilityResults","getEligibilityStats","getSchemesByCategoryWithEligibility","healthCheck"],"sources":["C:/Users/KulkarniSr/OneDrive - Version 1/Downloads_Backup/CURSOR-PROJECT/frontend/src/services/api.ts"],"sourcesContent":["import axios, { AxiosResponse } from 'axios';\r\nimport { \r\n  ApiResponse, \r\n  AuthRequest, \r\n  LoginResponse, \r\n  User, \r\n  Scheme, \r\n  EligibilityResult, \r\n  EligibilityStats, \r\n  TestUser \r\n} from '../types';\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\n// Create axios instance\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  timeout: 10000,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Request interceptor to add auth token\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Response interceptor to handle errors\r\napi.interceptors.response.use(\r\n  (response: AxiosResponse) => {\r\n    return response;\r\n  },\r\n  (error) => {\r\n    if (error.response?.status === 401) {\r\n      // Token expired or invalid\r\n      localStorage.removeItem('token');\r\n      localStorage.removeItem('user');\r\n      window.location.href = '/login';\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Auth API\r\nexport const authAPI = {\r\n  // Send OTP to phone number\r\n  sendOTP: async (phoneNumber: string): Promise<ApiResponse<{ phoneNumber: string; otp: string }>> => {\r\n    const response = await api.post<ApiResponse<{ phoneNumber: string; otp: string }>>(\r\n      '/auth/send-otp',\r\n      { phoneNumber }\r\n    );\r\n    return response.data;\r\n  },\r\n\r\n  // Verify OTP and login\r\n  verifyOTP: async (phoneNumber: string, otp: string): Promise<ApiResponse<LoginResponse>> => {\r\n    const response = await api.post<ApiResponse<LoginResponse>>(\r\n      '/auth/verify-otp',\r\n      { phoneNumber, otp }\r\n    );\r\n    return response.data;\r\n  },\r\n\r\n  // Get test users\r\n  getTestUsers: async (): Promise<ApiResponse<TestUser[]>> => {\r\n    const response = await api.get<ApiResponse<TestUser[]>>('/auth/test-users');\r\n    return response.data;\r\n  },\r\n};\r\n\r\n// User API\r\nexport const userAPI = {\r\n  // Get user profile\r\n  getProfile: async (): Promise<ApiResponse<User>> => {\r\n    const response = await api.get<ApiResponse<User>>('/user/profile');\r\n    return response.data;\r\n  },\r\n\r\n  // Update user profile\r\n  updateProfile: async (userData: Partial<User>): Promise<ApiResponse<User>> => {\r\n    const response = await api.put<ApiResponse<User>>('/user/profile', userData);\r\n    return response.data;\r\n  },\r\n\r\n  // Get user verification status\r\n  getVerificationStatus: async (): Promise<ApiResponse<any>> => {\r\n    const response = await api.get<ApiResponse<any>>('/user/verification');\r\n    return response.data;\r\n  },\r\n\r\n  // Get dashboard data\r\n  getDashboardData: async (): Promise<ApiResponse<any>> => {\r\n    const response = await api.get<ApiResponse<any>>('/user/dashboard');\r\n    return response.data;\r\n  },\r\n};\r\n\r\n// Schemes API\r\nexport const schemesAPI = {\r\n  // Get all schemes\r\n  getAllSchemes: async (): Promise<ApiResponse<Scheme[]>> => {\r\n    const response = await api.get<ApiResponse<Scheme[]>>('/schemes');\r\n    return response.data;\r\n  },\r\n\r\n  // Get scheme by ID\r\n  getSchemeById: async (id: string): Promise<ApiResponse<Scheme>> => {\r\n    const response = await api.get<ApiResponse<Scheme>>(`/schemes/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Get schemes by category\r\n  getSchemesByCategory: async (category: string): Promise<ApiResponse<Scheme[]>> => {\r\n    const response = await api.get<ApiResponse<Scheme[]>>(`/schemes/category/${category}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Get user's eligible schemes\r\n  getEligibleSchemes: async (): Promise<ApiResponse<Scheme[]>> => {\r\n    const response = await api.get<ApiResponse<Scheme[]>>('/schemes/eligible/me');\r\n    return response.data;\r\n  },\r\n\r\n  // Get user's eligibility for all schemes\r\n  getEligibilityResults: async (): Promise<ApiResponse<EligibilityResult[]>> => {\r\n    const response = await api.get<ApiResponse<EligibilityResult[]>>('/schemes/eligibility/me');\r\n    return response.data;\r\n  },\r\n\r\n  // Get eligibility stats\r\n  getEligibilityStats: async (): Promise<ApiResponse<EligibilityStats>> => {\r\n    const response = await api.get<ApiResponse<EligibilityStats>>('/schemes/stats/me');\r\n    return response.data;\r\n  },\r\n\r\n  // Get schemes by category with eligibility\r\n  getSchemesByCategoryWithEligibility: async (category: string): Promise<ApiResponse<EligibilityResult[]>> => {\r\n    const response = await api.get<ApiResponse<EligibilityResult[]>>(`/schemes/category/${category}/me`);\r\n    return response.data;\r\n  },\r\n};\r\n\r\n// Health check\r\nexport const healthCheck = async (): Promise<ApiResponse<{ status: string; message: string }>> => {\r\n  const response = await api.get<ApiResponse<{ status: string; message: string }>>('/health');\r\n  return response.data;\r\n};\r\n\r\nexport default api; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}